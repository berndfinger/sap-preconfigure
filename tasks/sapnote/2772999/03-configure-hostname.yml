---
# tasks file for sap-preconfigure: configuration

# 03-configure-hostname.yml
- debug:
    msg: "SAP note 2772999 Step 3: Configure Hostname"

### The hostname module sets the hostname using hostnamectl on the system

- name: ensure short system hostname is set
  hostname:
    name: '{{ sap_preconfigure_hostname }}'

### This little shell snippet saves all alias that might be already configured in the
### hosts file to the variable sap_base_settings_register_hostname_aliases

- name: modify /etc/hosts
  block:
    - name: get all hostaliases of {{ sap_preconfigure_ip }}
      shell: |
            awk ' ( $1 == "{{ sap_preconfigure_ip }}" ) {
                    for (i=2; i<=NF; ++i) {
                      if (( $i != "{{ sap_preconfigure_hostname }}" ) && ( $i != "{{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }}" )) { printf $i" " }
                    }
                   }' /etc/hosts

      register: sap_preconfigure_register_hostname_aliases
      changed_when: false
      check_mode: no

      ## The next module set the hostentry as required including the previously collected aliasses
  
    - name: ensure hostentry is correct
      lineinfile:
            path: /etc/hosts
            regexp: '^{{ sap_preconfigure_ip }}\s'
            line: '{{ sap_preconfigure_ip }} {{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }} {{ sap_preconfigure_hostname }} {{ sap_preconfigure_register_hostname_aliases.stdout }}'

      ### To make sure that my routine works and some maybe previous misconfigurations are not put in the hosts entry
      ### I double check that there are no double entries of ip or hostnames in the etc host

    # This task is skipped in check mode as nothing has changed
    - name: check for double entries of {{ sap_preconfigure_ip }} in /etc/hosts
      shell: |
            n=$(grep "^{{ sap_preconfigure_ip }}\s" /etc/hosts | wc -l)
            if [ $n -eq 1 ]; then
               exit 0
            else
               echo "Duplicate IP Entry in /etc/hosts"
               exit 1
            fi
      changed_when: false
      when:  not ansible_check_mode

    # This task is skipped in check mode as nothing has changed
    - name: check for double entries of hostnames in /etc/hosts
      shell: |
            n=$(grep -w "{{ item }}" /etc/hosts | wc -l)
            if [ $n -eq 1 ]; then
               exit 0
            else
               exit 1
            fi
      changed_when: false
      with_items:
            - '{{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }}'
            - '{{ sap_preconfigure_hostname }}'
      when:  not ansible_check_mode

  when:
    - sap_preconfigure_modify_etc_hosts | bool

- name: Verify that /etc/host entry is correct for DNS resolution
  block:
    - name: Check if ipv4 address, FQDN, and hostname are in /etc/hosts
      command: bash -lc "awk 'BEGIN{a=0}/{{ sap_preconfigure_ip }}/&&/{{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }}/&&/{{ sap_preconfigure_hostname }}/{a++}END{print a}' /etc/hosts"
      register: sap_preconfigure_register_command_result
      changed_when: false
      check_mode: no
    - debug:
        var: sap_preconfigure_register_command_result.stdout_lines, sap_preconfigure_register_command_result.stderr_lines
    - debug:
        msg:
          - "Expected:"
          - "{{ sap_preconfigure_ip }} {{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }} {{ sap_preconfigure_hostname }}"
      when:
        - sap_preconfigure_register_command_result.stdout != "1"
    
    # this Error is ignored in ansible check mode
    - fail:
        msg:
        - "Server's ipv4 address, FQDN, or hostname are not in /etc/hosts!"
      when:
        - sap_preconfigure_register_command_result.stdout != "1"
      ignore_errors: "{{ ansible_check_mode }}"

  when:
     - not sap_preconfigure_modify_etc_hosts | bool
  
- debug:
      msg: "System {{ sap_preconfigure_hostname }}, {{ sap_preconfigure_hostname }}.{{ sap_preconfigure_domain }} has ipv4 address {{ sap_preconfigure_ip }}"

...
